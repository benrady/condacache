#!/usr/bin/env bash

set -euo pipefail

conda=$(command -v conda || true)
CONDACACHE_AUTH=${CONDACACHE_AUTH:-""}
CONDACACHE_REPO_URL=${CONDACACHE_REPO_URL:-""}
no_unpack=false

if [[ ! -x "$conda" ]]; then
  echo "Exiting! Can't find conda on your PATH: $PATH"
  exit 2
fi

function help() {
  echo ""
  echo "CondaCache -- The caching conda environment installer."
  echo "Usage:"
  echo ""
  echo "  $ condacache [OPTIONS] <environment file> <venv directory>"
  echo ""
  echo "Options:"
  echo ""
  echo " -n, --no-unpack -- Do not automatically call 'conda-unpack' after expanding a cached environment"
  echo ""
  echo "Can be configured with the following environment variables:"
  echo "  CONDACACHE_REPO_URL - HTTP PUT compatible service for storing tarballs"
  echo "    ex: 'https://artifactory.example.com/artifactory/condacache'"
  echo ""
  echo "  CONDACACHE_AUTH (optional) - The username:password used for auth when uploading to the REPO URL"
  echo "    ex: 'alice:my_password'"
}

function is_cached() {
  if [[ -n "${CONDACACHE_REPO_URL}" ]]; then
    curl -sLf -I "${CONDACACHE_REPO_URL}/$tarball" > /dev/null
    return $?
  else
    echo "CONDACACHE_REPO_URL variable not set. Skipping download."
    return 1
  fi
}

function check_environment() {
  ${conda} env export -p "${target_dir}" > "${target_dir}/environment.yml"
  if ! diff <(sed /^prefix/d "${target_dir}/environment.yml") <(sed /^prefix/d "${env_file}"); then
    echo "Environment file ${env_file} does not perfectly match the generated environment, as checked by 'conda env export' (Is it underspecified?)"
    exit 4
  fi
}

function ensure_conda_pack() {
  if ! ${conda} pack --help &> /dev/null; then
    echo "Conda-pack is not installed. Let me do that for you."
    ${conda} install -y -c conda-forge conda-pack
  fi
}

function pack_tarball() {
  rm -f "$tarball"
  ${conda} pack -p "${target_dir}" -o "${tarball}"
}

function cache_environment() {
  if [[ -z "${CONDACACHE_AUTH}" ]]; then
    echo "CONDACACHE_AUTH variable not set. Skipping upload."
  else
    check_environment
    if [[ ! -e $tarball ]]; then
      echo "Creating tarball..."
      pack_tarball
    fi
    curl -XPUT -u "${CONDACACHE_AUTH}" -T "${tarball}" "${CONDACACHE_REPO_URL}/$tarball"
  fi
}

function fetch_environment() {
  mkdir -p "${target_dir}"
  echo "Unpacking ${CONDACACHE_REPO_URL}/${tarball} to ${target_dir}"
  curl -sL "${CONDACACHE_REPO_URL}/$tarball" | tar -zx -C "${target_dir}"
  ensure_conda_pack
  if [[ $no_unpack == "true" ]]; then
    echo "Not calling conda-unpack on this environment"
  else
    "${target_dir}/bin/conda-unpack"
  fi
}

if [[ $# -eq 0 ]]; then
  help
  exit 1
fi

while [ "$1" != "" ]; do
  case $1 in
    -n | --no-unpack )      shift
      no_unpack=true
      ;;
    -h | --help )           help
      exit 0
      ;;
    * )                     break;
  esac
done

env_file=$1
target_dir=$2
sum_output=( $(md5sum "${env_file}") )
env_sum="${sum_output[0]}"
tarball="${env_sum}.tar.gz"

if is_cached; then
  fetch_environment
else
  ${conda} env create --quiet -p "${target_dir}" -f "${env_file}"
  if [[ $no_unpack == "true" ]];then
    ensure_conda_pack
    echo "Creating packed environment..."
    pack_tarball
    rm -rf "${target_dir}"
    mkdir -p "${target_dir}"
    tar -C "${target_dir}" -zxf "${tarball}"
  fi
  cache_environment
  if [[ -e ${tarball} ]]; then
    rm "${tarball}"
  fi
fi

echo "${env_file} installed into ${target_dir}"
